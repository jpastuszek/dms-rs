// Generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: src/schema/raw_data_point.capnp


pub mod date_time {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data, Result};
  use capnp::private::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  #[derive(Clone, Copy)]
  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id(_unused_self : Option<Reader>) -> u64 { _private::TYPE_ID }
  }
  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>) -> Result<Reader<'a>> {
      ::std::result::Result::Ok(::capnp::traits::FromStructReader::new(try!(reader.get_struct(::std::ptr::null()))))
    }
  }

  impl <'a, 'b : 'a> ::capnp::traits::CastableTo<Reader<'a>> for Reader<'b> {
    fn cast(self) -> Reader<'a> { Reader { reader : self.reader } }
  }

  impl <'a> Reader<'a> {
    pub fn borrow<'b>(&'b self) -> Reader<'b> {
      Reader { reader : self.reader}
    }

    pub fn total_size(&self) -> Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_unix_timestamp(self) -> i64 {
      self.reader.get_data_field::<i64>(0)
    }
    #[inline]
    pub fn get_nanosecond(self) -> u32 {
      self.reader.get_data_field::<u32>(2)
    }
  }

  pub struct Builder<'a> { builder : ::capnp::private::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { _private::STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id(_unused_self : Option<Builder>) -> u64 { _private::TYPE_ID }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>) -> Result<Builder<'a>> {
      ::std::result::Result::Ok(::capnp::traits::FromStructBuilder::new(try!(builder.get_struct(_private::STRUCT_SIZE, ::std::ptr::null()))))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::private::layout::PointerBuilder<'b>, value : Reader<'a>) -> Result<()> { pointer.set_struct(&value.reader) }
  }

  impl <'a, 'b : 'a> ::capnp::traits::CastableTo<Builder<'a>> for Builder<'b> {
    fn cast(self) -> Builder<'a> { Builder { builder : self.builder } }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    pub fn borrow<'b>(&'b mut self) -> Builder<'b> {
      Builder { builder : self.builder}
    }

    pub fn total_size(&self) -> Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_unix_timestamp(self) -> i64 {
      self.builder.get_data_field::<i64>(0)
    }
    #[inline]
    pub fn set_unix_timestamp(&mut self, value : i64)  {
      self.builder.set_data_field::<i64>(0, value);
    }
    #[inline]
    pub fn get_nanosecond(self) -> u32 {
      self.builder.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn set_nanosecond(&mut self, value : u32)  {
      self.builder.set_data_field::<u32>(2, value);
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 2, pointers : 0 };
    pub const TYPE_ID: u64 = 0xd215ff0b5717a356;
  }
}

pub mod raw_data_point {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data, Result};
  use capnp::private::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  #[derive(Clone, Copy)]
  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id(_unused_self : Option<Reader>) -> u64 { _private::TYPE_ID }
  }
  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>) -> Result<Reader<'a>> {
      ::std::result::Result::Ok(::capnp::traits::FromStructReader::new(try!(reader.get_struct(::std::ptr::null()))))
    }
  }

  impl <'a, 'b : 'a> ::capnp::traits::CastableTo<Reader<'a>> for Reader<'b> {
    fn cast(self) -> Reader<'a> { Reader { reader : self.reader } }
  }

  impl <'a> Reader<'a> {
    pub fn borrow<'b>(&'b self) -> Reader<'b> {
      Reader { reader : self.reader}
    }

    pub fn total_size(&self) -> Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_location(self) -> Result<text::Reader<'a>> {
      self.reader.get_pointer_field(0).get_text(::std::ptr::null(), 0)
    }
    pub fn has_location(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_path(self) -> Result<text::Reader<'a>> {
      self.reader.get_pointer_field(1).get_text(::std::ptr::null(), 0)
    }
    pub fn has_path(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_component(self) -> Result<text::Reader<'a>> {
      self.reader.get_pointer_field(2).get_text(::std::ptr::null(), 0)
    }
    pub fn has_component(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_timestamp(self) -> Result<::raw_data_point_capnp::date_time::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3))
    }
    pub fn has_timestamp(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_value(self) -> ::raw_data_point_capnp::raw_data_point::value::Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.reader)
    }
  }

  pub struct Builder<'a> { builder : ::capnp::private::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { _private::STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id(_unused_self : Option<Builder>) -> u64 { _private::TYPE_ID }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>) -> Result<Builder<'a>> {
      ::std::result::Result::Ok(::capnp::traits::FromStructBuilder::new(try!(builder.get_struct(_private::STRUCT_SIZE, ::std::ptr::null()))))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::private::layout::PointerBuilder<'b>, value : Reader<'a>) -> Result<()> { pointer.set_struct(&value.reader) }
  }

  impl <'a, 'b : 'a> ::capnp::traits::CastableTo<Builder<'a>> for Builder<'b> {
    fn cast(self) -> Builder<'a> { Builder { builder : self.builder } }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    pub fn borrow<'b>(&'b mut self) -> Builder<'b> {
      Builder { builder : self.builder}
    }

    pub fn total_size(&self) -> Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_location(self) -> Result<text::Builder<'a>> {
      self.builder.get_pointer_field(0).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_location(&mut self, value : text::Reader)  {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_location(self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_location(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_path(self) -> Result<text::Builder<'a>> {
      self.builder.get_pointer_field(1).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_path(&mut self, value : text::Reader)  {
      self.builder.get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_path(self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    pub fn has_path(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_component(self) -> Result<text::Builder<'a>> {
      self.builder.get_pointer_field(2).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_component(&mut self, value : text::Reader)  {
      self.builder.get_pointer_field(2).set_text(value);
    }
    #[inline]
    pub fn init_component(self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(2).init_text(size)
    }
    pub fn has_component(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_timestamp(self) -> Result<::raw_data_point_capnp::date_time::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3))
    }
    #[inline]
    pub fn set_timestamp(&mut self, value : ::raw_data_point_capnp::date_time::Reader) -> Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(3), value)
    }
    #[inline]
    pub fn init_timestamp(self, ) -> ::raw_data_point_capnp::date_time::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), 0)
    }
    pub fn has_timestamp(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_value(self) -> ::raw_data_point_capnp::raw_data_point::value::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_value(self, ) -> ::raw_data_point_capnp::raw_data_point::value::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 0);
      self.builder.set_data_field::<i64>(0, 0u8 as i64);
      self.builder.set_data_field::<f64>(0, 0u8 as f64);
      self.builder.set_bool_field(0, false);
      self.builder.get_pointer_field(4).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
    pub fn get_timestamp(&self) -> ::raw_data_point_capnp::date_time::Pipeline {
      FromTypelessPipeline::new(self._typeless.get_pointer_field(3))
    }
    pub fn get_value(&self) -> ::raw_data_point_capnp::raw_data_point::value::Pipeline {
      FromTypelessPipeline::new(self._typeless.noop())
    }
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 2, pointers : 5 };
    pub const TYPE_ID: u64 = 0x964bf9cf9aea0383;
  }

  pub mod value {
    #![allow(unused_imports)]
    use capnp::capability::{FromClientHook, FromTypelessPipeline};
    use capnp::{text, data, Result};
    use capnp::private::layout;
    use capnp::traits::{FromStructBuilder, FromStructReader};
    use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

    pub use self::Which::{Integer,Float,Boolean,Text};

    #[derive(Clone, Copy)]
    pub struct Reader<'a> { reader : layout::StructReader<'a> }

    impl <'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id(_unused_self : Option<Reader>) -> u64 { _private::TYPE_ID }
    }
    impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader : reader }
      }
    }

    impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>) -> Result<Reader<'a>> {
        ::std::result::Result::Ok(::capnp::traits::FromStructReader::new(try!(reader.get_struct(::std::ptr::null()))))
      }
    }

    impl <'a, 'b : 'a> ::capnp::traits::CastableTo<Reader<'a>> for Reader<'b> {
      fn cast(self) -> Reader<'a> { Reader { reader : self.reader } }
    }

    impl <'a> Reader<'a> {
      pub fn borrow<'b>(&'b self) -> Reader<'b> {
        Reader { reader : self.reader}
      }

      pub fn total_size(&self) -> Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      pub fn has_text(&self) -> bool {
        if self.reader.get_data_field::<u16>(4) != 3 { return false; }
        !self.reader.get_pointer_field(4).is_null()
      }
      #[inline]
      pub fn which(self) -> ::std::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
        match self.reader.get_data_field::<u16>(4) {
          0 => {
            return ::std::result::Result::Ok(Integer(
              self.reader.get_data_field::<i64>(0)
            ));
          }
          1 => {
            return ::std::result::Result::Ok(Float(
              self.reader.get_data_field::<f64>(0)
            ));
          }
          2 => {
            return ::std::result::Result::Ok(Boolean(
              self.reader.get_bool_field(0)
            ));
          }
          3 => {
            return ::std::result::Result::Ok(Text(
              self.reader.get_pointer_field(4).get_text(::std::ptr::null(), 0)
            ));
          }
          x => return ::std::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Builder<'a> { builder : ::capnp::private::layout::StructBuilder<'a> }
    impl <'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id(_unused_self : Option<Builder>) -> u64 { _private::TYPE_ID }
    }
    impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder : ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder : builder }
      }
    }

    impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
      fn set_pointer_builder<'b>(pointer : ::capnp::private::layout::PointerBuilder<'b>, value : Reader<'a>) -> Result<()> { pointer.set_struct(&value.reader) }
    }

    impl <'a, 'b : 'a> ::capnp::traits::CastableTo<Builder<'a>> for Builder<'b> {
      fn cast(self) -> Builder<'a> { Builder { builder : self.builder } }
    }

    impl <'a> Builder<'a> {
      pub fn as_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.as_reader())
      }
      pub fn borrow<'b>(&'b mut self) -> Builder<'b> {
        Builder { builder : self.builder}
      }

      pub fn total_size(&self) -> Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn set_integer(&mut self, value : i64)  {
        self.builder.set_data_field::<u16>(4, 0);
        self.builder.set_data_field::<i64>(0, value);
      }
      #[inline]
      pub fn set_float(&mut self, value : f64)  {
        self.builder.set_data_field::<u16>(4, 1);
        self.builder.set_data_field::<f64>(0, value);
      }
      #[inline]
      pub fn set_boolean(&mut self, value : bool)  {
        self.builder.set_data_field::<u16>(4, 2);
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn set_text(&mut self, value : text::Reader)  {
        self.builder.set_data_field::<u16>(4, 3);
        self.builder.get_pointer_field(4).set_text(value);
      }
      #[inline]
      pub fn init_text(self, size : u32) -> text::Builder<'a> {
        self.builder.set_data_field::<u16>(4, 3);
        self.builder.get_pointer_field(4).init_text(size)
      }
      pub fn has_text(&self) -> bool {
        if self.builder.get_data_field::<u16>(4) != 3 { return false; }
        !self.builder.get_pointer_field(4).is_null()
      }
      #[inline]
      pub fn which(self) -> ::std::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
        match self.builder.get_data_field::<u16>(4) {
          0 => {
            return ::std::result::Result::Ok(Integer(
              self.builder.get_data_field::<i64>(0)
            ));
          }
          1 => {
            return ::std::result::Result::Ok(Float(
              self.builder.get_data_field::<f64>(0)
            ));
          }
          2 => {
            return ::std::result::Result::Ok(Boolean(
              self.builder.get_bool_field(0)
            ));
          }
          3 => {
            return ::std::result::Result::Ok(Text(
              self.builder.get_pointer_field(4).get_text(::std::ptr::null(), 0)
            ));
          }
          x => return ::std::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
    impl FromTypelessPipeline for Pipeline {
      fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless : typeless }
      }
    }
    impl Pipeline {
    }
    mod _private {
      pub const TYPE_ID: u64 = 0xfa60765d84e81abb;
    }
    pub enum Which<A0> {
      Integer(i64),
      Float(f64),
      Boolean(bool),
      Text(A0),
    }
    pub type WhichReader<'a> = Which<Result<text::Reader<'a>>>;
    pub type WhichBuilder<'a> = Which<Result<text::Builder<'a>>>;
  }
}
